(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{166:function(a,t,e){a.exports=e.p+"assets/img/cache.9c39add4.png"},167:function(a,t,e){a.exports=e.p+"assets/img/cache2.6d58bcc7.png"},201:function(a,t,e){"use strict";e.r(t);var i=[function(){var a=this,t=a.$createElement,i=a._self._c||t;return i("div",{staticClass:"content"},[i("h2",{attrs:{id:"缓存"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#缓存","aria-hidden":"true"}},[a._v("#")]),a._v(" 缓存")]),a._v(" "),i("p"),i("div",{staticClass:"table-of-contents"},[i("ul",[i("li",[i("a",{attrs:{href:"#缓存"}},[a._v("缓存")])]),i("li",[i("a",{attrs:{href:"#分类"}},[a._v("分类")])]),i("li",[i("a",{attrs:{href:"#简述各类缓存技术优缺点"}},[a._v("简述各类缓存技术优缺点")])]),i("li",[i("a",{attrs:{href:"#浏览器缓存机制"}},[a._v("浏览器缓存机制")]),i("ul",[i("li",[i("a",{attrs:{href:"#基本原理"}},[a._v("基本原理")])]),i("li",[i("a",{attrs:{href:"#异同"}},[a._v("异同")])]),i("li",[i("a",{attrs:{href:"#强缓存"}},[a._v("强缓存")])]),i("li",[i("a",{attrs:{href:"#协商缓存"}},[a._v("协商缓存")])]),i("li",[i("a",{attrs:{href:"#整体流程图"}},[a._v("整体流程图")])]),i("li",[i("a",{attrs:{href:"#对应状态码"}},[a._v("对应状态码")])]),i("li",[i("a",{attrs:{href:"#选择缓存顺序"}},[a._v("选择缓存顺序")])])])])])]),a._v("\n重用已获取的资源，减少延迟与网络阻塞，进而减少显示某个资源所用的时间，借助 HTTP 缓存，Web 站点变得更具有响应性。"),i("p"),a._v(" "),i("p",[a._v("要求：")]),a._v(" "),i("ol",[i("li",[a._v("静态资源加载速度")]),a._v(" "),i("li",[a._v("页面渲染速度（建立在资源加载速度之上）")])]),a._v(" "),i("h2",{attrs:{id:"分类"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#分类","aria-hidden":"true"}},[a._v("#")]),a._v(" 分类")]),a._v(" "),i("p",[i("img",{attrs:{src:e(166),alt:"An image"}}),a._v("\n只讨论浏览器（客户端）方面的缓存。")]),a._v(" "),i("h2",{attrs:{id:"简述各类缓存技术优缺点"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#简述各类缓存技术优缺点","aria-hidden":"true"}},[a._v("#")]),a._v(" 简述各类缓存技术优缺点")]),a._v(" "),i("ol",[i("li",[a._v("cookie")])]),a._v(" "),i("ul",[i("li",[a._v("优点：对于传输部分少量不敏感数据，非常简明有效")]),a._v(" "),i("li",[a._v("缺点：容量小（4K），不安全（cookie被拦截，很可能暴露session）。不可以跨域调用")])]),a._v(" "),i("ol",{attrs:{start:"2"}},[i("li",[a._v("Web Storage")])]),a._v(" "),i("ul",[i("li",[a._v("优点：5M容量，localStorage可做持久化数据存储")]),a._v(" "),i("li",[a._v("缺点：本地储存数据都容易被篡改，容易受到XSS攻击")])]),a._v(" "),i("ol",{attrs:{start:"3"}},[i("li",[a._v("indexDB")])]),a._v(" "),i("ul",[i("li",[a._v("优点：提供了一个结构化的、事务型的、高性能的NoSQL类型的数据库，包含了一组同步/异步API")]),a._v(" "),i("li",[a._v("缺点：")])]),a._v(" "),i("ol",{attrs:{start:"4"}},[i("li",[a._v("PWA(Service Worker)")])]),a._v(" "),i("ul",[i("li",[a._v("优点：是官方建议替代Application Cache（Manifest）的方案\n作为一个独立的线程，是一段在后台运行的脚本，可使web app也具有类似原生App的离线使用、消息推送、后台自动更新等能力")]),a._v(" "),i("li",[a._v("限制:(谈不上缺点)不能访问 DOM，不能使用同步 API，需要HTTPS协议")])]),a._v(" "),i("h2",{attrs:{id:"浏览器缓存机制"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#浏览器缓存机制","aria-hidden":"true"}},[a._v("#")]),a._v(" 浏览器缓存机制")]),a._v(" "),i("ol",[i("li",[a._v("强缓存")]),a._v(" "),i("li",[a._v("协商缓存")])]),a._v(" "),i("h3",{attrs:{id:"基本原理"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#基本原理","aria-hidden":"true"}},[a._v("#")]),a._v(" 基本原理")]),a._v(" "),i("ol",[i("li",[a._v("浏览器在加载资源时，根据请求头的【expires】和【cache-control】判断是否命中强缓存，是则直接从缓存读取资源，不会发请求到服务器")]),a._v(" "),i("li",[a._v("如果没有命中强缓存，浏览器一定会发送一个请求到服务器，通过【last-modified】和【etag】验证资源是否命中协商缓存，如果命中，服务器会将这个请求返回，但是不会返回这个资源的数据，依然是从缓存中读取资源")]),a._v(" "),i("li",[a._v("如果前面两者都没有命中，直接从服务器加载资源")])]),a._v(" "),i("h3",{attrs:{id:"异同"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#异同","aria-hidden":"true"}},[a._v("#")]),a._v(" 异同")]),a._v(" "),i("ul",[i("li",[a._v("同：如果命中，都是从客户端缓存中加载资源，而不是从服务器加载资源数据")]),a._v(" "),i("li",[a._v("异：强缓存不发请求到服务器，协商缓存会发请求到服务器")])]),a._v(" "),i("h3",{attrs:{id:"强缓存"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#强缓存","aria-hidden":"true"}},[a._v("#")]),a._v(" 强缓存")]),a._v(" "),i("p",[a._v("强缓存通过Expires和Cache-Control两种响应头实现")]),a._v(" "),i("ol",[i("li",[a._v("Expires")])]),a._v(" "),i("blockquote",[i("p",[a._v("Expires是http1.0提出的一个表示资源过期时间的header，它描述的是一个绝对时间，由服务器返回。\nExpires 受限于本地时间，如果修改了本地时间，可能会造成缓存失效")])]),a._v(" "),i("p",[a._v("Expires: Wed, 11 May 2018 07:20:00 GMT")]),a._v(" "),i("ol",{attrs:{start:"2"}},[i("li",[a._v("Cache-Control")])]),a._v(" "),i("blockquote",[i("p",[a._v("Cache-Control 出现于 HTTP / 1.1，优先级高于 Expires ,表示的是相对时间")])]),a._v(" "),i("p",[a._v("Cache-Control: max-age=315360000")]),a._v(" "),i("div",{staticClass:"tip custom-block"},[i("p",{staticClass:"custom-block-title"},[a._v("TIP")]),a._v(" "),i("p",[a._v("Cache-Control: no-cache不会缓存数据到本地的说法是错误的。\n原因：是可以存储在本地缓存区的，只是在与原始服务器进行新鲜度再验证之前，缓存不能将其提供给客户端使用。")]),a._v(" "),i("p",[a._v("Cache-Control: no-store才是真正的不缓存数据到本地")]),a._v(" "),i("p",[a._v("Cache-Control: public可以被所有用户缓存（多用户共享），包括终端和CDN等中间代理服务器")]),a._v(" "),i("p",[a._v("Cache-Control: private只能被终端浏览器缓存（而且是私有缓存），不允许中继缓存服务器进行缓存")])]),a._v(" "),i("h3",{attrs:{id:"协商缓存"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存","aria-hidden":"true"}},[a._v("#")]),a._v(" 协商缓存")]),a._v(" "),i("p",[a._v("当浏览器对某个资源的请求没有命中强缓存，就会发一个请求到服务器，验证协商缓存是否命中，如果协商缓存命中，请求响应返回的http状态为【304并且会显示一个Not Modified的字符串】")]),a._v(" "),i("p",[a._v("协商缓存是利用的是【Last-Modified，If-Modified-Since】和【ETag、If-None-Match】这两对Header来管理的")]),a._v(" "),i("ol",[i("li",[a._v("Last-Modified，If-Modified-Since\nLast-Modified 表示本地文件最后修改日期，浏览器会在request header加上If-Modified-Since（上次返回的Last-Modified的值），询问服务器在该日期后资源是否有更新，有更新的话就会将新的资源发送回来")])]),a._v(" "),i("p",[a._v("但是如果在本地打开缓存文件，就会造成 Last-Modified 被修改，所以在 HTTP / 1.1 出现了 ETag")]),a._v(" "),i("ol",{attrs:{start:"2"}},[i("li",[a._v("ETag、If-None-Match\nEtag就像一个指纹，资源变化都会导致ETag变化，跟最后修改时间没有关系，ETag可以保证每一个资源是唯一的")])]),a._v(" "),i("p",[a._v("If-None-Match的header会将上次返回的Etag发送给服务器，询问该资源的Etag是否有更新，有变动就会发送新的资源回来")]),a._v(" "),i("p",[a._v("ETag的优先级比Last-Modified更高")]),a._v(" "),i("h4",{attrs:{id:"具体为什么要用etag，主要出于下面几种情况考虑："}},[i("a",{staticClass:"header-anchor",attrs:{href:"#具体为什么要用etag，主要出于下面几种情况考虑：","aria-hidden":"true"}},[a._v("#")]),a._v(" 具体为什么要用ETag，主要出于下面几种情况考虑：")]),a._v(" "),i("ul",[i("li",[a._v("一些文件也许会周期性的更改，但是他的内容并不改变(仅仅改变的修改时间)，这个时候我们并不希望客户端认为这个文件被修改了，而重新GET；")]),a._v(" "),i("li",[a._v("某些文件修改非常频繁，比如在秒以下的时间内进行修改，(比方说1s内修改了N次)，If-Modified-Since能检查到的粒度是s级的，这种修改无法判断(或者说UNIX记录MTIME只能精确到秒)；")]),a._v(" "),i("li",[a._v("某些服务器不能精确的得到文件的最后修改时间。")])]),a._v(" "),i("h3",{attrs:{id:"整体流程图"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#整体流程图","aria-hidden":"true"}},[a._v("#")]),a._v(" 整体流程图")]),a._v(" "),i("p",[i("img",{attrs:{src:e(167),alt:"An image"}})]),a._v(" "),i("h3",{attrs:{id:"对应状态码"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#对应状态码","aria-hidden":"true"}},[a._v("#")]),a._v(" 对应状态码")]),a._v(" "),i("ul",[i("li",[a._v("200：强缓Expires/Cache-Control存失效时，返回新的资源文件")]),a._v(" "),i("li",[a._v("200(from xxx cache)：强缓Expires/Cache-Control两者都存在，未过期，Cache-Control优先Expires时，浏览器从本地获取资源成功")]),a._v(" "),i("li",[a._v("304(Not Modified)：协商缓存Last-modified/Etag没有过期时，服务端返回状态码304")])]),a._v(" "),i("h3",{attrs:{id:"选择缓存顺序"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#选择缓存顺序","aria-hidden":"true"}},[a._v("#")]),a._v(" 选择缓存顺序")]),a._v(" "),i("ol",[i("li",[a._v("Cache-Control —— 请求服务器之前")]),a._v(" "),i("li",[a._v("Expires —— 请求服务器之前")]),a._v(" "),i("li",[a._v("If-None-Match (Etag) —— 请求服务器")]),a._v(" "),i("li",[a._v("If-Modified-Since (Last-Modified) —— 请求服务器")])])])}],r=e(0),v=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},i,!1,null,null,null);v.options.__file="cache.md";t.default=v.exports}}]);